plugins {
    id 'java'
    id 'application'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'com.ashvardanian'
version = '0.1.0-SNAPSHOT'

// Configure main class for application plugin
application {
    mainClass = 'com.ashvardanian.USearchSpark'

    // Base JVM args - can be overridden with JAVA_OPTS environment variable
    def baseJvmArgs = [
        // Java module system compatibility
        '--add-opens=java.base/java.lang=ALL-UNNAMED',
        '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED',
        '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
        '--add-opens=java.base/java.io=ALL-UNNAMED',
        '--add-opens=java.base/java.net=ALL-UNNAMED',
        '--add-opens=java.base/java.nio=ALL-UNNAMED',
        '--add-opens=java.base/java.util=ALL-UNNAMED',
        '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED',
        '--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED',
        '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED',
        '--add-opens=java.base/sun.nio.cs=ALL-UNNAMED',
        '--add-opens=java.base/sun.security.action=ALL-UNNAMED',
        '--add-opens=java.base/sun.util.calendar=ALL-UNNAMED',
        '--add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED',
        '--add-modules=jdk.incubator.vector',
        // Enable Vector API for Lucene performance

        // Memory settings for large-scale benchmarking (750+ GB machine)
        '-Xms64g',
        // Start with 64GB heap (pre-allocate for performance)
        '-Xmx128g',
        // Reduce to 128GB heap - prevents massive GC pauses
        '-XX:NewRatio=1',
        // 50% young generation for heavy allocation

        // GC tuning for optimized heap (128GB) - prevent 4-5s pauses
        '-XX:+UseZGC',
        // ZGC for sub-10ms pauses regardless of heap size
        '-XX:+UnlockExperimentalVMOptions',
        // Required for ZGC
        // Fallback to G1 if ZGC unavailable:
        // '-XX:+UseG1GC',
        // '-XX:MaxGCPauseMillis=50',       // Much stricter pause target
        // '-XX:G1HeapRegionSize=32m',      // Optimize for 128GB heap
        // '-XX:G1MixedGCCountTarget=8',
        // '-XX:G1ConcRefinementThreads=16',
        '-XX:+UseStringDeduplication',
        // Save memory on strings
        '-XX:+UnlockExperimentalVMOptions',
        '-XX:+UseTransparentHugePages',
        // Critical for large heap performance
        '-XX:+UseLargePages',
        // Enable large pages

        // Performance optimizations
        '-XX:+AlwaysPreTouch',
        // Pre-touch all memory
        '-XX:+OptimizeStringConcat',
        // Optimize string operations

        // JIT compiler tuning
        '-XX:+UseCompressedOops',
        // Compressed object pointers
        '-XX:ReservedCodeCacheSize=512m',
        // Larger code cache
        '-XX:InitialCodeCacheSize=256m',
        '-XX:CompileThreshold=1000',
        // Library path
        '-Djava.library.path=/tmp'
    ]

    // Allow JAVA_OPTS environment variable to override defaults
    def javaOpts = System.getenv('JAVA_OPTS')
    if (javaOpts) {
        println "ðŸ”§ Using JAVA_OPTS: ${javaOpts}"
        def customArgs = javaOpts.split('\\s+').findAll { it.trim() }
        // Module system compatibility args are always needed
        def requiredArgs = baseJvmArgs.findAll { it.startsWith('--add-opens') || it.startsWith('--add-modules') }
        applicationDefaultJvmArgs = requiredArgs + customArgs
    } else {
        println "ðŸ“‹ Using default JVM settings for 750+ GB machine (override with JAVA_OPTS)"
        applicationDefaultJvmArgs = baseJvmArgs
    }
}

repositories {
    mavenCentral()

    // Custom repository for USearch JAR
    flatDir {
        dirs 'lib'
    }
}

// Task to download USearch JAR from GitHub releases
task downloadUSearchJar {
    doLast {
        def usearchVersion = '2.20.4'
        def usearchUrl = "https://github.com/unum-cloud/usearch/releases/download/v${usearchVersion}/usearch-${usearchVersion}.jar"
        def usearchFile = file("lib/usearch-${usearchVersion}.jar")

        usearchFile.parentFile.mkdirs()
        if (!usearchFile.exists()) {
            new URL(usearchUrl).withInputStream { i ->
                usearchFile.withOutputStream { it << i }
            }
            println "Downloaded USearch JAR: ${usearchFile.name}"
        }
    }
}

// Make compilation depend on downloading USearch
compileJava.dependsOn downloadUSearchJar

dependencies {
    // Spark 4.0 dependencies (implementation for gradle run, provided for spark-submit)
    implementation 'org.apache.spark:spark-core_2.13:4.0.0'
    implementation 'org.apache.spark:spark-sql_2.13:4.0.0'
    implementation 'org.apache.spark:spark-mllib_2.13:4.0.0'

    // USearch JAR from local lib directory (downloaded automatically)
    implementation name: 'usearch', version: '2.20.4', ext: 'jar'

    // Apache Lucene for HNSW baseline
    implementation 'org.apache.lucene:lucene-core:9.12.0'
    implementation 'org.apache.lucene:lucene-queryparser:9.12.0'

    // JSON processing
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'

    // Cloud storage support (removed for now to fix JAR size issues)
    // implementation 'org.apache.hadoop:hadoop-aws:3.3.4'
    // implementation 'com.amazonaws:aws-java-sdk-s3:1.12.262'

    // Logging
    implementation 'org.slf4j:slf4j-simple:1.7.36'

    // CLI table formatting
    implementation 'de.vandermeer:asciitable:0.3.2'

    // Test dependencies
    testImplementation 'junit:junit:4.13.2'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.ashvardanian.USearchSpark'
                )
    }

    // Regular JAR for gradle run (dependencies managed by gradle)
    archiveClassifier = ''
}

// Separate fat JAR task for spark-submit
task fatJar(type: Jar) {
    manifest {
        attributes(
                'Main-Class': 'com.ashvardanian.USearchSpark'
                )
    }

    archiveClassifier = 'all'
    zip64 = true

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from sourceSets.main.output

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Spotless configuration for code formatting
spotless {
    java {
        target 'src/**/*.java'
        googleJavaFormat('1.17.0').aosp().skipJavadocFormatting()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }

    groovyGradle {
        target '*.gradle', 'gradle/*.gradle'
        greclipse()
        indentWithSpaces(4)
        endWithNewline()
    }
}
